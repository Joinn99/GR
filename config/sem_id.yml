# Config for multi-device full finetuning in full_finetune_distributed.py
# using a Llama3.2 3B Instruct model
#
# This config assumes that you've run the following command before launching
# this run:
#   tune download meta-llama/Llama-3.2-3B-Instruct --output-dir /tmp/Llama-3.2-3B-Instruct --ignore-patterns "original/consolidated.00.pth"
#
# To launch on 4 devices, run the following command from root:
#   tune run --nproc_per_node 4 full_finetune_distributed --config llama3_2/3B_full
#
# You can add specific overrides through the command line. For example
# to override the checkpointer directory while launching training
# you can run:
#   tune run --nproc_per_node 2 full_finetune_distributed --config llama3_2/3B_full checkpointer.checkpoint_dir=<YOUR_CHECKPOINT_DIR>
#
# This config works best when the model is being fine-tuned on 2+ GPUs.
# Single device full finetuning requires more memory optimizations. It's
# best to use 3B_full_single_device.yaml for those cases


output_dir: ${OUTPUT_DIR}

# Dataset
dataset:
  - _component_: torchtune.datasets.chat_dataset
    source: json
    data_files: /home/Data/tjwei/GR/data/sequences/amazon_${DOMAIN}_items.jsonl.gz
    conversation_column: messages
    conversation_style: openai
    packed: false
  - _component_: torchtune.datasets.chat_dataset
    source: json
    data_files: /home/Data/tjwei/GR/data/sequences/amazon_${DOMAIN}_${SPLIT}.jsonl.gz
    conversation_column: messages
    conversation_style: openai
    packed: false

  # - _component_: torchtune.datasets.chat_dataset
  #   source: Joinn/GenerativeRec
  #   name: ${DATASET}
  #   split: ${SPLIT}
  #   conversation_column: messages
  #   conversation_style: openai
  #   packed: false

seed: 0
shuffle: False

# Model arguments
model:
  _component_: torchtune.models.qwen3.qwen3_0_6b_instruct

# Tokenizer
tokenizer:
  _component_: torchtune.models.qwen3.qwen3_tokenizer
  path: ${ZOO_PATH}/Qwen3-0.6B/vocab.json
  merges_file: ${ZOO_PATH}/Qwen3-0.6B/merges.txt
  special_tokens_path: /home/Data/tjwei/GR/config/added_tokens.json
  max_seq_len: 4096

checkpointer:
  _component_: torchtune.training.FullModelHFCheckpointer
  checkpoint_dir: ${ZOO_PATH}/Qwen3-0.6B/
  checkpoint_files: [model.safetensors]
  recipe_checkpoint: null
  output_dir: ${OUTPUT_DIR}
  model_type: QWEN3

resume_from_checkpoint: False

# Fine-tuning arguments
batch_size: ${BATCH_SIZE}
epochs: ${EPOCHS}

optimizer:
  _component_: torch.optim.AdamW
  lr: ${LEARNING_RATE}
  fused: true
loss:
  _component_: torchtune.modules.loss.CEWithChunkedOutputLoss
max_steps_per_epoch: null
gradient_accumulation_steps: 2  # Use to increase effective batch size
lr_scheduler:
  _component_: torchtune.training.lr_schedulers.get_cosine_schedule_with_warmup
  num_warmup_steps: 50

# Training env
device: cuda

resize_token_embeddings: true
resized_vocab_size: 152704

# Memory management
enable_activation_checkpointing: true  # True reduces memory
enable_activation_offloading: false  # True reduces memory
clip_grad_norm: null
compile: true  # torch.compile the model + loss, True increases speed + decreases memory
optimizer_in_bwd: False  # True saves memory. Requires gradient_accumulation_steps=1

# Reduced precision
dtype: bf16

# Logging
metric_logger:
  _component_: torchtune.training.metric_logging.DiskLogger
  log_dir: ${OUTPUT_DIR}/logs
log_every_n_steps: 1
log_peak_memory_stats: True
log_level: INFO


# Profiler (disabled)
profiler:
  _component_: torchtune.training.setup_torch_profiler
  enabled: False

  #Output directory of trace artifacts
  output_dir: ${OUTPUT_DIR}/profiling_outputs

  #`torch.profiler.ProfilerActivity` types to trace
  cpu: True
  cuda: True

  #trace options passed to `torch.profiler.profile`
  profile_memory: False
  with_stack: False
  record_shapes: True
  with_flops: False

  # `torch.profiler.schedule` options:
  # wait_steps -> wait, warmup_steps -> warmup, active_steps -> active, num_cycles -> repeat
  wait_steps: 5
  warmup_steps: 3
  active_steps: 2
  num_cycles: 1